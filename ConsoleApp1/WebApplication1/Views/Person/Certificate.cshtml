@model ReflectionIT.Mvc.Paging.PagingList<StudentViewModel>
@using ReflectionIT.Mvc.Paging
@addTagHelper *,ReflectionIT.Mvc.Paging

@{
    ViewData["Title"] = "Certificate";
}

@section Scripts{
    <script src="~/js/Education/certificate.js"></script>
}

<h1 style="display:flex; justify-content:center; align-items:center">Certificate</h1>


<div class="container mb-5">

    <form asp-action="Certificate" method="post">
        <p>
            <b style="margin: 10px;"> Select: </b>
            @Html.RadioButton("select", "Middle") <text class="marginForText">Middle</text>
            @Html.RadioButton("select", "Police") <text class="marginForText">Police</text>
            @Html.RadioButton("select", "Medicine") <text class="marginForText">Medicine</text>

        </p>

        <br />
        <p>

            <input type="submit" value="OK" class="btn btn-primary" style="margin-left:15px" />

        </p>
    </form>
    @* @if (ViewBag.Message != null)
        {
            <script type="text/javascript">
                window.onload = function () {
                    alert("@ViewBag.Message");
                };
            </script>
        }*@

    <form asp-action="SearchStudentByFacultyAndCourseYear" method="get">

        <div class="row">
            <div class="col-sm-6">
                <div class="row">
                    <div class="col-sm-6">

                        <select class="form-control" asp-items="ViewBag.Faculties" name="faculty">
                            <option selected disabled>Search By Faculty: </option>
                        </select>
                    </div>
                    <div class="col-sm-6">
                        <select class="form-control" name="courseYear">
                            <option selected disabled>Search By courseYear: </option>
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <input type="submit" value="Search" class="btn btn-primary" style="margin-left:15px" />

                <a class="btn btn-primary" style="margin-left:15px" asp-action="Certificate">Get All Students</a>
            </div>
        </div>
    </form>

    <table border="1" class="table">
        <thead>
            <tr>
                <th scope="col">IIN</th>
                <th scope="col">FIO</th>
                <th scope="col">Course Year</th>
                <th scope="col">Faculty</th>
                <th scope="col">Certificate</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null)
            {
                @foreach (var item in Model)
                {
                    <tr>

                        <td>
                            @Html.ActionLink(@item.Iin, "StudentFullInfo", new { studentId = item.Id })
                        </td>
                        <td>@item.Surname @item.Name @item.Patronymic </td>
                        @if (item.CourseYear == 0)
                        {
                            <td>Graduated</td>
                        }
                        else
                        {
                            <td> @item.CourseYear </td>
                        }
                        <td> @item.Faculty </td>
                        @for (var i = 0; i < item.Certificates.Count; i++)
                        {
                            <td class="cancelBtn">
                                @item.Certificates[i].Type
                                <input class="btn btn-danger cancelCertificate" id="@item.Certificates[i].Type" data-name="@item.Iin" type="button" value="X" />
                            </td>
                        }


                    </tr>
                }
            }

        </tbody>
    </table>


    <nav aria-label="nav example">
        @if (this.Model != null)
        {
            @await this.Component.InvokeAsync("Pager", new { pagingList = this.Model })
        }

    </nav>

</div>

<style>
    .marginForText {
        margin-right: 25px;
    }

    ul.pagination li {
        margin: 10px;
    }
</style>
